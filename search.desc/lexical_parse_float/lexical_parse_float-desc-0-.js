searchState.loadedDescShard("lexical_parse_float", 0, "Fast lexical string-to-float conversion routines.\nThe base prefix character in the packed struct.\nThe base suffix character in the packed struct.\nIf base prefixes are case-sensitive.\nIf base suffixes are case-sensitive.\nIf exponent characters are case-sensitive.\nIf special (non-finite) values are case-sensitive.\nIf multiple consecutive digit separators are allowed.\nThe digit separator character in the packed struct.\nThe base for the exponent.\nIf multiple consecutive exponent digit separators are …\nIf digit separators are allowed between exponent digits.\nIf a digit separator is allowed before any exponent digits.\nThe radix for the exponent digits.\nIf a digit separator is allowed after any exponent digits.\nEmpty byte array found.\nEmpty exponent found.\nEmpty fraction found.\nEmpty integer found.\nEmpty mantissa found.\nContains the error value\nError code during parsing, indicating failure type.\nExponent was present without fraction component.\nIf multiple consecutive fraction digit separators are …\nIf digit separators are allowed between fraction digits.\nIf a digit separator is allowed before any integer digits.\nIf a digit separator is allowed after any fraction digits.\nTrait for numerical types that can be parsed from bytes.\nTrait for numerical types that can be parsed from bytes …\nIf multiple consecutive integer digit separators are …\nIf digit separators are allowed between integer digits.\nIf a digit separator is allowed before any integer digits.\nIf a digit separator is allowed after any integer digits.\nIf digit separators are allowed between digits.\nShort infinity string is too long.\nLong infinity string is too long.\nLong infinity string is too short: it must be as long as …\nInvalid character for a base prefix.\nInvalid character for a base suffix.\nInvalid consecutive exponent digit separator.\nInvalid consecutive fraction digit separator.\nInvalid consecutive integer digit separator.\nInvalid decimal point character.\nInvalid digit found before string termination.\nInvalid digit separator character.\nExponent was present but not allowed.\nInvalid base for the exponent.\nOptional exponent flags were set while disabling exponent …\nInvalid radix for the exponent digits.\nSet no positive exponent sign while requiring exponent …\nInvalid symbol to represent exponent notation.\nInvalid flags were set without the format feature.\nInvalid float parsing algorithm.\nInvalid precision flags for writing floats.\nInvalid short infinity string: must start with an <code>i</code> …\nInvalid long infinity string: must start with an <code>i</code> …\nInteger or integer component of float had invalid leading …\nInvalid radix for the mantissa (significant) digits.\nSet no positive mantissa sign while requiring mantissa …\nInvalid NaN string: must start with an <code>n</code> character.\nInvalid negative exponent break: break is above 0.\nInvalid negative sign for an unsigned type was found.\nInvalid positive exponent break: break is below 0.\nInvalid positive exponent sign was found.\nInvalid positive mantissa sign was found.\nInvalid positive sign for an integer was found.\nInvalid punctuation characters: multiple symbols overlap.\nInvalid radix for the significant digits.\nSet optional special float flags while disable special …\nIf a digit separator is allowed before any digits.\nThe radix for the significant digits in the packed struct.\nNo exponent with required exponent notation.\nExponent sign was required(usize), but not found.\nMantissa sign was required(usize), but not found.\nIntegral sign was required(usize), but not found.\nIf exponent notation is not allowed.\nIf an exponent without fraction is not allowed.\nIf leading zeros before a float are not allowed.\nIf leading zeros before an integer are not allowed.\nIf a positive sign before the exponent is not allowed.\nIf a positive sign before the mantissa is not allowed.\nIf special (non-finite) values are not allowed.\nNaN string is too long.\nHelper to access features from the packed format struct.\nValidating builder for <code>NumberFormat</code> from the provided …\nContains the success value\nOptions to customize parsing floats.\nCustom formatting options for parsing a number.\nBuilder for <code>Options</code>.\nIntegral overflow occurred during numeric parsing.\nShared trait for all parser options.\nThe radix for the significant digits in the packed struct.\nIf at least 1 digit in the number is required.\nIf digits are required after the exponent character.\nIf exponent notation is required.\nIf a sign symbol before the exponent is required.\nIf digits are required after the decimal point.\nIf digits are required before the decimal point.\nIf significant digits are required.\nIf a sign symbol before the mantissa is required.\nA specialized <code>Result</code> type for lexical operations.\nIf any digit separators are allowed in special …\nAn error did not actually occur, and the result was …\nIf a digit separator is allowed after any digits.\nIntegral underflow occurred during numeric parsing.\nGet the optional character for the base prefix.\nSet the optional character for the base prefix.\nGet the optional character for the base suffix.\nSet the optional character for the base suffix.\nCreate number format for standard, binary number.\nCreate 128-bit, packed number format struct from builder …\nBuild the packed number format, panicking if the builder …\nCreate 128-bit, packed number format struct from builder …\nGet <code>NumberFormatBuilder</code> as a static function.\nGet if base prefixes are case-sensitive.\nSet if base prefixes are case-sensitive.\nGet if base suffixes are case-sensitive.\nSet if base suffixes are case-sensitive.\nGet if exponent characters are case-sensitive.\nSet if exponent characters are case-sensitive.\nGet if special (non-finite) values are case-sensitive.\nSet if special (non-finite) values are case-sensitive.\nGet if multiple consecutive digit separators are allowed.\nSet all consecutive digit separator flags.\nCreate number format for standard, decimal number.\nGet a description of the error in a const, panic friendly …\nGet the digit separator for the number format.\nSet the digit separator for the number format.\nGet the digit separator flags from the number format.\nAllow digit separators in all locations for all components.\nGet the error type from the format.\nGet the error type from the radix-only for the format.\nGet the radix for the exponent.\nSet the radix for the exponent.\nGet if multiple consecutive exponent digit separators are …\nSet if multiple consecutive exponent digit separators are …\nGet the exponent digit separator flags from the number …\nSet all exponent digit separator flag masks.\nGet the exponent flags from the number format.\nGet if digit separators are allowed between exponent …\nSet if digit separators are allowed between exponent …\nGet if a digit separator is allowed before any exponent …\nSet if a digit separator is allowed before any exponent …\nGet the radix for exponent digits.\nSet the radix for exponent digits.\nGet if a digit separator is allowed after any exponent …\nSet if a digit separator is allowed after any exponent …\nGet the flags from the number format.\nThe creation and processing of number format packed …\nGet if multiple consecutive fraction digit separators are …\nSet if multiple consecutive fraction digit separators are …\nGet the fraction digit separator flags from the number …\nSet all fraction digit separator flag masks.\nGet if digit separators are allowed between fraction …\nSet if digit separators are allowed between fraction …\nGet if a digit separator is allowed before any fraction …\nSet if a digit separator is allowed before any fraction …\nGet if a digit separator is allowed after any fraction …\nSet if a digit separator is allowed after any fraction …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nChecked parser for a string-to-number conversion.\nChecked parser for a string-to-number conversion.\nChecked parser for a string-to-number conversion.\nChecked parser for a string-to-number conversion.\nCreate number format from radix.\nGet the optional character for the base prefix.\nGet the optional character for the base suffix.\nGet if base prefixes are case-sensitive.\nGet if base suffixes are case-sensitive.\nGet if exponent characters are case-sensitive.\nGet if special (non-finite) values are case-sensitive.\nGet the digit separator for the number format.\nGet the radix for the exponent.\nGet if multiple consecutive exponent digit separators are …\nGet if digit separators are allowed between exponent …\nGet if a digit separator is allowed before any exponent …\nGet the radix for exponent digits.\nGet if a digit separator is allowed after any exponent …\nGet if multiple consecutive fraction digit separators are …\nGet if digit separators are allowed between fraction …\nGet if a digit separator is allowed before any fraction …\nGet if a digit separator is allowed after any fraction …\nGet if multiple consecutive integer digit separators are …\nGet if digit separators are allowed between integer digits.\nGet if a digit separator is allowed before any integer …\nGet if a digit separator is allowed after any integer …\nGet the radix for mantissa digits.\nGet if exponent notation is not allowed.\nGet if an exponent without fraction is not allowed.\nGet if leading zeros before a float are not allowed.\nGet if leading zeros before an integer are not allowed.\nGet if a positive sign before the exponent is not allowed.\nGet if a positive sign before the mantissa is not allowed.\nGet if special (non-finite) values are not allowed.\nGet if digits are required after the exponent character, …\nGet if exponent notation is required.\nGet if a sign symbol before the exponent is required.\nGet if digits are required after the decimal point, if the …\nGet if digits are required before the decimal point.\nGet if at least 1 significant digit is required.\nGet if a sign symbol before the mantissa is required.\nGet if any digit separators are allowed in special …\nGet if the format has a base suffix.\nGet if the format has a base suffix.\nGet if the format has a digit separator.\nCreate number format for standard, hexadecimal number.\nGet the index for the parsing error.\nGet if multiple consecutive integer digit separators are …\nSet if multiple consecutive integer digit separators are …\nGet the integer digit separator flags from the number …\nSet all integer digit separator flag masks.\nGet if digit separators are allowed between integer digits.\nSet if digit separators are allowed between integer digits.\nGet if a digit separator is allowed before any integer …\nSet if a digit separator is allowed before any integer …\nGet if a digit separator is allowed after any integer …\nSet if a digit separator is allowed after any integer …\nGet the interface flags from the number format.\nGet if digit separators are allowed between digits.\nSet all internal digit separator flags.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nconst fn check to see if an error is of a specific type.\nDetermine if the options are valid.\nDetermine if the number format is valid.\nDetermine if the radixes in the number format are valid.\nGet if a digit separator is allowed before any digits.\nSet all leading digit separator flags.\nGet the radix for mantissa digits.\nSet the radix for mantissa digits.\nCreate new instance (for methods and validation).\nCreate new <code>NumberFormatBuilder</code> with default arguments.\nGet if exponent notation is not allowed.\nSet if exponent notation is not allowed.\nGet if an exponent without fraction is not allowed.\nSet if an exponent without fraction is not allowed.\nGet if leading zeros before a float are not allowed.\nSet if leading zeros before a float are not allowed.\nGet if leading zeros before an integer are not allowed.\nSet if leading zeros before an integer are not allowed.\nGet if a positive sign before the exponent is not allowed.\nSet if a positive sign before the exponent is not allowed.\nGet if a positive sign before the mantissa is not allowed.\nSet if a positive sign before the mantissa is not allowed.\nGet if special (non-finite) values are not allowed.\nSet if special (non-finite) values are not allowed.\nCreate number format for standard, octal number.\nConfiguration options for parsing floats.\nGet the radix for the significant digits.\nAlias for <code>mantissa radix</code>.\nGet the <code>radix^2</code> for the significant digits.\nGet the <code>radix^4</code> for the significant digits.\nGet the <code>radix^8</code> for the significant digits.\nCreate <code>NumberFormatBuilder</code> using existing values.\nRe-create builder from format.\nGet if at least 1 digit in the number is required.\nSet if digits are required for all float components.\nGet if digits are required after the exponent character.\nSet if digits are required after the exponent character, …\nGet if exponent notation is required.\nSet if exponent notation is required.\nGet if a sign symbol before the exponent is required.\nSet if a sign symbol before the exponent is required.\nGet if digits are required after the decimal point.\nSet if digits are required after the decimal point, if the …\nGet if digits are required before the decimal point.\nSet if digits are required before the decimal point.\nGet if at least 1 significant digit is required.\nSet if at least 1 significant digit is required.\nGet if a sign symbol before the mantissa is required.\nSet if a sign symbol before the mantissa is required.\nGet if any digit separators are allowed in special …\nSet if any digit separators are allowed in special …\nGet if a digit separator is allowed after any digits.\nSet all trailing digit separator flags.\nMask to extract the base prefix character.\nShift to convert to and from a base prefix as a <code>u8</code>.\nMask to extract the base suffix character.\nShift to convert to and from a base suffix as a <code>u8</code>.\nNumber format for a <code>C11</code> literal hexadecimal floating-point …\nNumber format for a <code>C11</code> string hexadecimal floating-point …\nNumber format for a <code>C11</code> literal floating-point number.\nNumber format for a <code>C11</code> string floating-point number.\nNumber format for a <code>C18</code> literal hexadecimal floating-point …\nNumber format for a <code>C18</code> string hexadecimal floating-point …\nNumber format for a <code>C18</code> literal floating-point number.\nNumber format for a <code>C18</code> string floating-point number.\nNumber format for a <code>C89</code> string hexadecimal floating-point …\nNumber format for a <code>C89</code> literal floating-point number.\nNumber format for a <code>C89</code> string floating-point number.\nNumber format for a <code>C90</code> string hexadecimal floating-point …\nNumber format for a <code>C90</code> literal floating-point number.\nNumber format for a <code>C90</code> string floating-point number.\nNumber format for a <code>C99</code> literal hexadecimal floating-point …\nNumber format for a <code>C99</code> string hexadecimal floating-point …\nNumber format for a <code>C99</code> literal floating-point number.\nNumber format for a <code>C99</code> string floating-point number.\nBase prefixes are case-sensitive.\nBase suffixes are case-sensitive.\nExponent characters are case-sensitive.\nSpecial (non-finite) values are case-sensitive.\nNumber format for a <code>Clojure</code> literal floating-point number.\nNumber format to parse a <code>Clojure</code> float from string.\nNumber format for a <code>Cobol</code> literal floating-point number.\nNumber format to parse a <code>Cobol</code> float from string.\nNumber format for a <code>Coffeescript</code> literal floating-point …\nNumber format to parse a <code>Coffeescript</code> float from string.\nMultiple consecutive digit separators are allowed.\nNumber format for a <code>C#1</code> literal floating-point number.\nNumber format to parse a <code>C#1</code> float from string.\nNumber format for a <code>C#2</code> literal floating-point number.\nNumber format to parse a <code>C#2</code> float from string.\nNumber format for a <code>C#3</code> literal floating-point number.\nNumber format to parse a <code>C#3</code> float from string.\nNumber format for a <code>C#4</code> literal floating-point number.\nNumber format to parse a <code>C#4</code> float from string.\nNumber format for a <code>C#5</code> literal floating-point number.\nNumber format to parse a <code>C#5</code> float from string.\nNumber format for a <code>C#6</code> literal floating-point number.\nNumber format to parse a <code>C#6</code> float from string.\nNumber format for a <code>C#7</code> literal floating-point number.\nNumber format to parse a <code>C#7</code> float from string.\nNumber format for a <code>C#</code> literal floating-point number.\nNumber format to parse a <code>C#</code> float from string.\nNumber format for a <code>C++03</code> literal floating-point number.\nNumber format for a <code>C++03</code> string floating-point number.\nNumber format for a <code>C++11</code> string hexadecimal …\nNumber format for a <code>C++11</code> literal floating-point number.\nNumber format for a <code>C++11</code> string floating-point number.\nNumber format for a <code>C++14</code> string hexadecimal …\nNumber format for a <code>C++14</code> literal floating-point number.\nNumber format for a <code>C++14</code> string floating-point number.\nNumber format for a <code>C++17</code> literal hexadecimal …\nNumber format for a <code>C++17</code> string hexadecimal …\nNumber format for a <code>C++17</code> literal floating-point number.\nNumber format for a <code>C++17</code> string floating-point number.\nNumber format for a <code>C++20</code> literal hexadecimal …\nNumber format for a <code>C++20</code> string hexadecimal …\nNumber format for a <code>C++20</code> literal floating-point number.\nNumber format for a <code>C++20</code> string floating-point number.\nNumber format for a <code>C++98</code> literal floating-point number.\nNumber format for a <code>C++98</code> string floating-point number.\nNumber format for a <code>C++</code> literal hexadecimal floating-point …\nNumber format to parse a <code>C++</code> hexadecimal float from string.\nNumber format for a <code>C++</code> literal floating-point number.\nNumber format to parse a <code>C++</code> float from string.\nNumber format for a <code>C</code> literal hexadecimal floating-point …\nNumber format to parse a <code>C</code> hexadecimal float from string.\nNumber format for a <code>C</code> literal floating-point number.\nNumber format to parse a <code>C</code> float from string.\nMask to extract the digit separator character.\nShift to convert to and from a digit separator as a <code>u8</code>.\nNumber format for a <code>D</code> literal floating-point number.\nNumber format to parse a <code>D</code> float from string.\nNumber format for an <code>Elixir</code> literal floating-point number.\nNumber format to parse an <code>Elixir</code> float from string.\nNumber format for an <code>Elm</code> literal floating-point number.\nNumber format to parse an <code>Elm</code> float from string.\nNumber format for an <code>Erlang</code> literal floating-point number.\nNumber format to parse an <code>Erlang</code> float from string.\nMask to extract the exponent base: the base the exponent …\nShift to convert to and from an exponent base as a <code>u32</code>.\nMultiple consecutive exponent digit separators are allowed.\nDigit separators are allowed between exponent digits.\nA digit separator is allowed before any exponent digits.\nMask to extract the exponent radix: the radix for the …\nShift to convert to and from an exponent radix as a <code>u32</code>.\nA digit separator is allowed after any exponent digits.\nNumber format for a <code>FORTRAN</code> literal floating-point number.\nNumber format to parse a <code>FORTRAN</code> float from string.\nMultiple consecutive fraction digit separators are allowed.\nDigit separators are allowed between fraction digits.\nA digit separator is allowed before any fraction digits.\nA digit separator is allowed after any fraction digits.\nNumber format for a <code>F#</code> literal floating-point number.\nNumber format to parse a <code>F#</code> float from string.\nNumber format for a <code>Gambit-C</code> literal floating-point number.\nNumber format to parse a <code>Gambit-C</code> float from string.\nNumber format for a <code>Golang</code> literal floating-point number.\nNumber format to parse a <code>Golang</code> float from string.\nNumber format for a <code>Guile</code> literal floating-point number.\nNumber format to parse a <code>Guile</code> float from string.\nNumber format for a <code>Haskell</code> literal floating-point number.\nNumber format to parse a <code>Haskell</code> float from string.\nMultiple consecutive integer digit separators are allowed.\nDigit separators are allowed between integer digits.\nA digit separator is allowed before any integer digits.\nA digit separator is allowed after any integer digits.\nDigit separators are allowed between digits.\nNumber format for a <code>Javascript</code> literal floating-point …\nNumber format to parse a <code>Javascript</code> float from string.\nNumber format for a <code>Java</code> literal floating-point number.\nNumber format to parse a <code>Java</code> float from string.\nNumber format for a <code>JSON</code> literal floating-point number.\nNumber format for a <code>Julia</code> literal floating-point number.\nNumber format to parse a <code>Julia</code> float from string.\nNumber format for a <code>Julia</code> literal floating-point number.\nNumber format to parse a <code>Julia</code> float from string.\nNumber format for a <code>Kawa</code> literal floating-point number.\nNumber format to parse a <code>Kawa</code> float from string.\nNumber format for a <code>Kotlin</code> literal floating-point number.\nNumber format to parse a <code>Kotlin</code> float from string.\nA digit separator is allowed before any digits.\nMask to extract the mantissa radix: the radix for the …\nShift to convert to and from a mantissa radix as a <code>u32</code>.\nNumber format for an <code>Matlab</code> literal floating-point number.\nNumber format to parse an <code>Matlab</code> float from string.\nNumber format for a <code>MongoDB</code> literal floating-point number.\nNumber format for a <code>MySQL</code> literal floating-point number.\nExponent notation is not allowed.\nExponent without a fraction component is not allowed.\nLeading zeros before a float value are not allowed.\nLeading zeros before an integer value are not allowed.\nPositive sign before the exponent is not allowed.\nPositive sign before the mantissa is not allowed.\nSpecial (non-finite) values are not allowed.\nHelper to access features from the packed format struct.\nValidating builder for <code>NumberFormat</code> from the provided …\nNumber format for an <code>Objective-C</code> literal floating-point …\nNumber format to parse an <code>Objective-C</code> float from string.\nNumber format for an <code>OCaml</code> literal floating-point number.\nNumber format to parse an <code>OCaml</code> float from string.\nNumber format for an <code>Octave</code> literal floating-point number.\nNumber format to parse an <code>Octave</code> float from string.\nNumber format for a <code>Perl</code> literal floating-point number.\nNumber format to parse a <code>Perl</code> float from string.\nNumber format for a <code>PHP</code> literal floating-point number.\nNumber format to parse a <code>PHP</code> float from string.\nNumber format for a <code>PostgreSQL</code> literal floating-point …\nNumber format for a <code>Python2</code> literal floating-point number.\nNumber format to parse a <code>Python2</code> float from string.\nNumber format for a <code>Python3.5</code> or lower literal …\nNumber format for a <code>Python3.6</code> or higher literal …\nNumber format for a <code>Python3</code> literal floating-point number.\nNumber format to parse a <code>Python3</code> float from string.\nNumber format for a <code>Python</code> literal floating-point number.\nNumber format to parse a <code>Python</code> float from string.\nAlias for <code>MANTISSA_RADIX</code>.\nMask to extract the exponent radix: the radix for the …\nAlias for <code>MANTISSA_RADIX_SHIFT</code>.\nNumber format for a <code>ReasonML</code> literal floating-point number.\nNumber format to parse a <code>ReasonML</code> float from string.\nAt least 1 digit in the number is required.\nDigits are required after the exponent character. This …\nExponent notation is required.\nPositive sign before the exponent is required.\nDigits are required after the decimal point. This check …\nDigits are required before the decimal point.\nMantissa digits are required (either before or after the …\nPositive sign before the mantissa is required.\nNumber format for a <code>Ruby</code> literal floating-point number.\nNumber format for an octal <code>Ruby</code> literal floating-point …\nNumber format to parse a <code>Ruby</code> float from string.\nNumber format for a <code>Rust</code> literal floating-point number.\nNumber format to parse a <code>Rust</code> float from string.\nNumber format for an <code>R</code> literal floating-point number.\nNumber format to parse an <code>R</code> float from string.\nNumber format for a <code>Sage</code> literal floating-point number.\nNumber format to parse a <code>Sage</code> float from string.\nNumber format for a <code>Scala</code> literal floating-point number.\nNumber format to parse a <code>Scala</code> float from string.\nAny digit separators are allowed in special (non-finite) …\nNumber format for a <code>SQLite</code> literal floating-point number.\nStandard number format. This is identical to the Rust …\nNumber format for a <code>Swift</code> literal floating-point number.\nNumber format to parse a <code>Swift</code> float from string.\nNumber format for a <code>TOML</code> literal floating-point number.\nA digit separator is allowed after any digits.\nNumber format for a <code>Visual Basic</code> literal floating-point …\nNumber format to parse a <code>Visual Basic</code> float from string.\nNumber format for an <code>XML</code> literal floating-point number.\nNumber format for a <code>YAML</code> literal floating-point number.\nNumber format for a <code>Zig</code> literal floating-point number.\nNumber format to parse a <code>Zig</code> float from string.\nGet the error type from the format packed struct.\nDetermine if the format packed struct is valid.\nDetermine if the base prefix character is valid.\nDetermine if the base suffix character is valid.\nDetermine if the digit separator is valid.\nDetermine if the provided exponent flags are valid.\nDetermine if all of the “punctuation” characters are …\nDetermine if the radix is valid.\nNumerical format where <code>^</code> is used as the exponent notation …\nNumber format for a <code>Clojure</code> literal floating-point number.\nNumber format to parse a <code>Clojure</code> float from string.\nNumber format for a <code>COBOL</code> literal floating-point number.\nNumber format to parse a <code>COBOL</code> float from string.\nNumber format for a <code>Coffeescript</code> literal floating-point …\nNumber format to parse a <code>Coffeescript</code> float from string.\nNumber format for a <code>C#</code> literal floating-point number.\nNumber format to parse a <code>C#</code> float from string.\nNumber format for a <code>C++</code> literal floating-point number.\nNumber format for a <code>C</code> literal floating-point number.\nNumerical format with a decimal comma. This is the …\nNumber format for a <code>D</code> literal floating-point number.\nNumber format for an <code>Elixir</code> literal floating-point number.\nNumber format to parse an <code>Elixir</code> float from string.\nNumber format for an <code>Elm</code> literal floating-point number.\nNumber format to parse an <code>Elm</code> float from string.\nNumber format for an <code>Erlang</code> literal floating-point number.\nNumber format to parse an <code>Erlang</code> float from string.\nNumber format for a <code>FORTRAN</code> literal floating-point number.\nNumber format for an <code>F#</code> literal floating-point number.\nNumber format for a <code>Gambit-C</code> literal floating-point number.\nNumber format to parse a <code>Gambit-C</code> float from string.\nNumber format for a <code>Go</code> literal floating-point number.\nNumber format for a <code>Guile</code> literal floating-point number.\nNumber format to parse a <code>Guile</code> float from string.\nNumber format for a <code>Haskell</code> literal floating-point number.\nNumber format to parse a <code>Haskell</code> float from string.\nNumerical format for hexadecimal floats, which use a <code>p</code> …\nNumber format for a <code>Javascript</code> literal floating-point …\nNumber format to parse a <code>Javascript</code> float from string.\nNumber format for a <code>Java</code> literal floating-point number.\nNumber format to parse a <code>Java</code> float from string.\nNumber format for a <code>JSON</code> literal floating-point number.\nNumber format for a <code>Julia</code> literal floating-point number.\nNumber format for a <code>Kawa</code> literal floating-point number.\nNumber format to parse a <code>Kawa</code> float from string.\nNumber format for a <code>Kotlin</code> literal floating-point number.\nNumber format to parse a <code>Kotlin</code> float from string.\nNumber format for a <code>MATLAB</code> literal floating-point number.\nMaximum length for a special string.\nNumber format for a <code>MongoDB</code> literal floating-point number.\nNumber format for a <code>MySQL</code> literal floating-point number.\nNumber format for an <code>Objective-C</code> literal floating-point …\nNumber format to parse an <code>Objective-C</code> float from string.\nNumber format for an <code>OCaml</code> literal floating-point number.\nOptions to customize parsing floats.\nBuilder for <code>Options</code>.\nNumber format for a <code>Perl</code> literal floating-point number.\nNumber format for a <code>PHP</code> literal floating-point number.\nNumber format for a <code>PostgreSQL</code> literal floating-point …\nNumber format for a <code>Python</code> literal floating-point number.\nNumber format for an <code>ReasonML</code> literal floating-point …\nNumber format for a <code>Ruby</code> literal floating-point number.\nNumber format to parse a <code>Ruby</code> float from string. <code>Ruby</code> can …\nNumber format for a <code>Rust</code> literal floating-point number.\nNumber format for an <code>R</code> literal floating-point number.\nNumber format for a <code>Sage</code> literal floating-point number.\nNumber format for a <code>Scala</code> literal floating-point number.\nNumber format to parse a <code>Scala</code> float from string.\nNumber format for a <code>SQLite</code> literal floating-point number.\nStandard number format.\nNumber format for a <code>Swift</code> literal floating-point number.\nNumber format for a <code>TOML</code> literal floating-point number.\nNumber format for a Visual Basic literal floating-point …\nNumber format to parse a <code>Visual Basic</code> float from string.\nNumber format for an <code>XML</code> literal floating-point number.\nNumber format for a <code>YAML</code> literal floating-point number.\nNumber format for a <code>Zig</code> literal floating-point number.\nBuild the <code>Options</code> struct.\nBuild the <code>Options</code> struct, panicking if the builder is …\nBuild the <code>Options</code> struct without validation.\nGet <code>OptionsBuilder</code> as a static function.\nSet the character to separate the integer from the …\nGet the character to separate the integer from the …\nSet the character to designate the exponent component of a …\nGet the character to designate the exponent component of a …\nCreate the default options for a given radix.\nGet the character to separate the integer from the …\nGet the character to designate the exponent component of a …\nGet the short string representation for <code>Infinity</code>.\nGet the long string representation for <code>Infinity</code>.\nGet if we disable the use of arbitrary-precision …\nGet the string representation for <code>NaN</code>.\nSet the short string representation for <code>Infinity</code>.\nGet the short string representation for <code>Infinity</code>.\nSet the long string representation for <code>Infinity</code>.\nGet the long string representation for <code>Infinity</code>.\nCheck if the builder state is valid.\nCheck if the options state is valid.\nSet if we disable the use of arbitrary-precision …\nGet if we disable the use of arbitrary-precision …\nSet the string representation for <code>NaN</code>.\nGet the string representation for <code>NaN</code>.\nCreate new options builder with default options.\nCreate options with default values.\nCreate <code>OptionsBuilder</code> using existing values.\nSet the character to separate the integer from the …\nSet the character to designate the exponent component of a …\nSet the short string representation for <code>Infinity</code>\nSet the long string representation for <code>Infinity</code>\nSet if we disable the use of arbitrary-precision …\nSet the string representation for <code>NaN</code>.")