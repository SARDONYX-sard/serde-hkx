searchState.loadedDescShard("serde_hkx_features", 0, "key: class index(e.g <code>1</code>)value: C++ Class\nShow diff between two files.\nDump binary data in hexadecimal\n<code>serde_hkx_features</code>’s errors\nConvenience file I/O.\nProgress bar trait\nSerialize/Deserialize ClassMap\nShow dependency tree from havok behavior state machine …\nVerification of hkx -&gt; Rust data type -&gt; hkx conversion to …\nkey: class index(e.g <code>&quot;1&quot;</code>)value: C++ Class\nConverts a <code>ClassMap</code> to a <code>ClassMapAlt</code> by converting integer …\nConverts a <code>ClassMapAlt</code> to a <code>ClassMap</code> if all keys can be …\n64bit hkx\nOutput format\n32bit hkx\nXML\nReturn the file extension corresponding to the format.\nReturns the argument unchanged.\nDetermine format from extension.\nReturn output format from input path.\nCalls <code>U::from(self)</code>.\nParallel Convert hkx &lt;-&gt; xml\nAsync Convert hkx &lt;-&gt; xml\nConvert directory.\nConvert <code>hkx</code>/<code>xml</code> file and vice versa.\nConvert dir or file (hkx, xml).\nConvert dir or file(hkx, xml).\nConvert dir.\nConvert <code>hkx</code>/<code>xml</code> file and vice vasa.\nConvert dir or file(hkx, xml).\nShow diff between two files.\nOutput diff between two files string to stdout/file.\nHexadecimal representation\nOutput bytes to stdout/file.\nOutput hexdump to stdout/file.\nOutput binary data from hexdump.\nCalculates the position in the hexdump output where the …\nDump binary data in hexadecimal.\nDeserialize error\nSNAFU context selector for the <code>Error::DeError</code> variant\nContains the error value\nCli error\nhkx conversion error\nSNAFU context selector for the <code>Error::FailedConvertFiles</code> …\nFailed to read file from\nSNAFU context selector for the <code>Error::FailedReadFile</code> …\nReproduce file error\nSNAFU context selector for the <code>Error::FailedReproduceFile</code> …\nhkx reproduce error\nSNAFU context selector for the <code>Error::FailedReproduceFiles</code> …\nPlease specify the output path.(OS cannot output bytes as …\nSNAFU context selector for the <code>Error::InvalidStdout</code> variant\nStandard io error\njwalk path error\nError when converting from <code>ClassMap</code> of String key to …\nSNAFU context selector for the <code>Error::KeyParse</code> variant\nThis path has a missing extension.\nSNAFU context selector for the <code>Error::MissingExtension</code> …\nContains the success value\n<code>Result</code> for <code>serde_hkx_features</code> crate.\nSerialize error\nSNAFU context selector for the <code>Error::SerError</code> variant\ndir strip error\nTracing log error\nThe only supported extension is <code>.hkx</code> or <code>.xml</code>. But this is …\nThe only supported extension is <code>.hkx</code> or <code>.xml</code>. But this …\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::UnsupportedExtension</code> …\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReads a file with some encoded string trait.\nReads a file with some encoded string.\nRead bytes.\nWrite specified or same location.\nWrite specified or same location.\nA default implementation of the <code>ProgressHandler</code> trait that …\nA trait for handling progress updates during a file …\nIncrements failure count.\nReturns the argument unchanged.\nIncrements the progress by a specified amount.\nCalls <code>U::from(self)</code>.\nCalled when no files are found in the directory.\nCalled when all files have been processed.\nThe path for the current progress state.\nSets the total number of items to process.\nIncrements success count.\nDeserialize ClassMap\nSerialize/Deserialize ClassMap\nDeserialize bytes(file contents) to ClassMap.\nSerialize bytes(file contents) to a file.\nGenerate reference tree.\nOutput reference tree to stdout/file.\nChecks reproduction for file/dir hkx.\nParallel checks reproduction for hkx files.\nCheck hkx reproduction.")