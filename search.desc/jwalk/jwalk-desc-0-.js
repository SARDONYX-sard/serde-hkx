searchState.loadedDescShard("jwalk", 0, "Filesystem walk.\nClient state maintained while performing walk.\nRepresentation of a file or directory.\nDirEntry iterator from <code>WalkDir.into_iter()</code>.\nContains the error value\nAn error produced by recursively walking a directory.\nContains the success value\nDegree of parallelism to use when performing walk.\nRun in default rayon thread pool.\nRun in existing rayon thread pool\nRun in new rayon thread pool with # threads\nA specialized Result type for WalkDir.\nRun on calling thread, similar to what happens in the …\nBuilder for walking a directory.\nGeneric builder for walking a directory.\nField where clients can store state from within the The …\nReturns the depth at which this entry was created relative …\nReturns the depth at which this error occurred relative to …\nDepth of this entry relative to the root directory where …\nReturn the file name of this entry.\nFile name of this entry without leading path component.\nReturn the file type for the file that this entry points …\nFile type for the file/directory that this entry points at.\nFollow symbolic links. By default, this is disabled.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSimilar to <code>io_error</code> except consumes self to convert to the …\nInspect the original <code>io::Error</code> if there is one.\nReturns true if this error is due to a busy thread-pool …\nReturns the path at which a cycle was detected.\nSet the maximum depth of entries yield by the iterator.\nReturn the metadata for the file that this entry points to.\nSet the minimum depth of entries yielded by the iterator.\nCreate a builder for a recursive directory iterator …\nDegree of parallelism to use when performing walk. …\nReference to the path of the directory containing this …\nPath used by this entry’s parent to read this entry.\nPath to the file/directory represented by this entry.\nReturns the path associated with this error if one exists.\nReturns <code>true</code> if and only if this entry was created from a …\nA callback function to process (sort/filter/skip/state) …\nIf <code>read_children_path</code> is set and resulting <code>fs::read_dir</code> …\nPath that will be used to read child entries. This is …\nRoot path of the walk.\nInitial ClientState::ReadDirState that is passed to …\nSkip hidden entries. Enabled by default.\nSort entries by <code>file_name</code> per directory. Defaults to <code>false</code>…\nTry to create an iterator or fail if the rayon threadpool …\nDefine when we consider the rayon default pool too busy to …\nSimilar to <code>Parallelism::RayonDefaultPool::busy_timeout</code> if …\nThe pool to spawn our work onto.")