searchState.loadedDescShard("serde_hkx", 0, "Trait that provides a method that can be used to sort …\nGet the aligned value.\nBinary Serialization/Deserialization\n(De)Serialize errors\nSort by dependent class from root for serialization of …\nSort by dependent class for XML serialization.\nAlignment functions\nHexadecimal representation\nBytes Serialization\nCode that has both serialization and deserialization …\nTODO: binary representation of Variant is unknown.\nReturns the argument unchanged.\nAnalyze as binary data of one file in order from hkx …\nfrom xml string\nAnalyze as binary data of one file in order from hkx …\nParse binary data as the type specified in the partial …\nParse binary data as the type specified in the partial …\nCalls <code>U::from(self)</code>.\nBinary parser combinator\nTypeKind bytes parsers\nkey: class name start offsetvalue: class name\nCreate <code>local_fixups</code> from bytes.\nAfter writing fixup, since it is 0xff up to align16, read …\nHas fixup maps &amp; section content bytes ref data.\nsrc(u32), section_index(u32), dst(u32)\nsrc(u32), dst(u32)\nsrc(u32), section_index(u32), classnames_start(u32)\nNOTE: The order in which C++ constructors are called is …\nReturns the argument unchanged.\nCreate a new fixups from section header &amp; bytes.\nLocation information needed when referencing class …\nCalls <code>U::from(self)</code>.\nA pointer about one struct is tied to the location of its …\nLocation information for the name of the C++ class that …\nParses ptr size(verify 0), size(<code>int</code> -&gt; <code>usize</code>), and …\nParses <code>bool</code>. <code>true</code> or `false``\nParses f16\nParse as <code>Quaternion</code>\nParses <code>f32</code>\nParses a string literal until <code>\\0</code>\nParse as <code>Vector4</code>\nOutput binary data from hexdump.\nCalculates the position in the hexdump output where the …\nDump binary data in hexadecimal.\nBinary data serializer\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAssume that the characters are ASCII characters<code>c_char</code>. In …\nThis method is called on HavokClasses array.(Write start)\nIgnore this method because it is an XML method.\nIn the binary serialization of hkx, this is the actual …\nThis is called in the Havok Class array or HashMap, or in …\nTo hkx binary file data.\nSerialize to bytes with custom <code>BytesSerializer</code> settings.\nHKX Header Format Specification\nThe 48bytes each HKX section header contains metadata …\nThe 64bytes HKX header contains metadata information about …\nSkyrim LegendaryEdition(32bit) header binary\nSkyrim SpecialEdition(64bit) header binary\nBase class.\nIndex of the contents class name section.\nOffset of the contents class name section.\nIndex of the contents section.\nOffset of the contents section.\nGet <code>contents_version_string</code> as <code>str</code>\nVersion string of the contents.\nVersion string of the contents separator. Always 0xff\nReturn Big-endian or little-endian\nEndianness of the file (0 for big-endian, 1 for …\nVersion of the file.\nVarious flags.\nReturns the argument unchanged.\nCreate a header by parsing 64bytes from bytes.\nCalls <code>U::from(self)</code>.\nFirst magic number (<code>0x57E0E057</code>)\nSecond magic number (<code>0x10C0C010</code>)\nMaximum predicate. None is -1 (== <code>0xFF 0xFF</code>)\nCreate a new <code>HkXHeader</code> instance with default values for …\nCreate a new <code>HkXHeader</code> instance with default values for …\nPadding option used in the file.\nGet padding size.\nCheck valid endian &amp; Parse as hkx root header.\nSize of pointers in bytes (4 or 8)\nNumber of sections in the HKX file.\nSection offset. None is -1 (== <code>0xFF 0xFF</code>)\nConvert to bytes.\nUser-defined tag.\n<code>*b&quot;__data__\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0&quot;</code>\nThe 48bytes each HKX section header contains metadata …\nSection start &amp; fixup base offset.\nUnknown offset information.\nUnknown offset information.\nReturns the argument unchanged.\nOffset from absolute offset to global fixup map.\nUnknown offset information.\nCalls <code>U::from(self)</code>.\nOffset from absolute offset to local fixup map.\nSection name.\nAlways must be <code>0xFF</code>\nOffset from absolute offset to virtual class fixup map.\nWrite section header to writer.\nCreate new <code>__classnames__</code> section header\nWrite <code>__types__</code> section header.\nThis crate errors.\nDeserialize error\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHexDump Display(For binary)/XML human-readable error …\nSerialize error\nParser combinator Error\nStill need to parse the syntax but the string provided is …\nContains the error value\nDeserialize error\nThe number of required constructors in C++ is …\n{msg}\nExpected class {expected}, but got {actual}.\nCould not find the {index}th corresponding class: …\nClass Ptr is None.\nThe data position pointed to by the pointer of the read …\nContains the success value\nHuman readable XML parsing error\nWrapper on <code>core::result::Result</code> for Deserializer.\nIncomplete parsing binary.\nIncomplete parsing XML. Remain: {remain}\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nError message\nError struct to represent parsing errors in a more …\nReturns the argument unchanged.\nConstructs <code>Self</code> from parse error &amp; input.\nConstructs <code>Self</code> from parse error &amp; input.\nCalls <code>U::from(self)</code>.\nContains the error value\nSerialize error\nOnly 0 (big) or 1 (little) can be specified for the header …\nSNAFU context selector for the <code>Error::InvalidEndian</code> variant\nstd io error.\n{msg}\nSNAFU context selector for the <code>Error::Message</code> variant\nThe constructor class for virtual_fixup did not exist in …\nSNAFU context selector for the …\nMissing global fixup class: {ptr}\nSNAFU context selector for the …\nNot found where to write ptr. This could be an incorrect …\nSNAFU context selector for the …\nContain null bytes in a string error\nContains the success value\nRelative position cannot be obtained because abs is larger …\nSNAFU context selector for the <code>Error::OverflowSubtractAbs</code> …\nWrapper on <code>core::result::Result</code> for Serializer.\nThe only supported pointer sizes are 4 and 8. But got …\nSNAFU context selector for the <code>Error::UnsupportedPtrSize</code> …\nInvalid utf8 error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nerror location\nerror location\nerror location\nerror location\nerror location\nerror location\nerror location\nError message\nmissing global fixup class ptr(e.g. #0050)\nInvalid utf8 error\nContain null bytes in a string error\nI/O Error\nA module that collects frequently used molds. It is …\nA module that collects frequently used molds. It is …\nA module that collects frequently used molds. It is …\nA module that collects frequently used molds. It is …\nA module that collects frequently used molds. It is …\nA module that collects frequently used molds. It is …\nA module that collects frequently used molds. It is …\nA module that collects frequently used molds. It is …\nTrait to create ptr dependencies tree\nTree of the order in which to serialize as binary data.\nTree of the order in which to serialize as XML.\nXML Serialization\nNote\nExample of XML to be parsed\nTODO: XML representation of Variant is unknown.\nReturns the argument unchanged.\nfrom partial xml string.\nfrom partial xml string with custom <code>XmlDeserializer</code> …\nFrom xml string.\nfrom xml string\nDeserializes any value and returns the rest of the string …\nfrom xml string with custom <code>XmlDeserializer</code> settings.\nCalls <code>U::from(self)</code>.\nXML parser combinator\nParses a XML comment.\nSkip comments and whitespace (0 or more times).\nSkip comments and whitespace (1 or more times).\nAnalyze in the following order.\nAnalyze in the following order.\nParses a string with surrounding whitespace(0 or more …\nXML tag parsers\nTypeKind XML parsers\nParses a xml attribute string(surrounded double quotes), …\nParses the array start tag (e.g. …\nParses the end tag <code>&lt;/tag&gt;</code>\nParses the field of class start closing tag <code>&gt;</code>, …\nParses the field of class start opening tag <code>&lt;hkparam name=</code>\nParses a number inside a string, e.g., <code>&quot;64&quot;</code>\nParses the start tag <code>&lt;tag&gt;</code>\nParses <code>bool</code>. <code>true</code> or <code>false</code>\nParse as <code>Matrix3</code>\nParse as <code>Matrix4</code>\nParse as <code>Pointer</code>\nParse as <code>QsTransform</code>\nParse as <code>Quaternion</code>\nParses <code>f32</code>\nParse as <code>Rotation</code>\nParses a string literal until <code>&lt;/</code>, e.g., <code>example</code> in (…\nParse as <code>Transform</code>\nParse as <code>Vector3</code>\nParse as <code>Vector4</code>\nIndent time\nIf you want to output XML partially, put <code>Option::None</code>.\nReturns the argument unchanged.\nIndent type(tab: <code>\\t</code>, space: <code> </code>. default: <code>\\t</code>)\nCalls <code>U::from(self)</code>.\nXML string\nXML Examples\nXML Examples\ne.g. 0\nXML Examples\nExpected XML Examples\nXML Examples\nCreate an XML string like the following\nFIXME: Unclear XML representation\nXML Examples\nIf you want to output XML partially, put <code>Option::None</code>.\nTo XML String.\nTo xml string with custom <code>XmlSerializer</code> settings.")