searchState.loadedDescShard("havok_serde", 0, "Forked serde to serialize and deserialize Havok Class.\nTrait whether it is Havok Class or not.\nDeserialization\nGet dependencies class of indexes to do topological sort.\nGet Class name.\nSerialization\nGet signature.\nArray of items of type T.\nC++ type: <code>hkBool</code> (<code>bool</code>)\nNull terminated string.\nC++ type: <code>hkChar</code> (<code>signed char</code>)\nClass Indexed Deserializer trait\nA <strong>data structure</strong> that can be deserialized from any data …\nA data structure that can be deserialized without …\n<code>DeserializeSeed</code> is the stateful form of the <code>Deserialize</code> …\nDeserializer\nenum type that stores only the size of <code>SizeType</code> in memory.\nProvides a <code>Visitor</code> access to the data of an enum in the …\nThe <code>Error</code> trait allows <code>Deserialize</code> implementations to …\nThe error type that can be returned if some error occurs …\nThe error type that can be returned if some error occurs …\nThe error type that can be returned if some error occurs …\nClass name Error\nThe error type that can be returned if some error occurs …\nThe error type that can be returned if some error occurs …\n<code>Expected</code> represents an explanation of what data a <code>Visitor</code> …\nC++ type: <code>hkFlags&lt;ENUM, SizeType&gt;</code> - 8,16,32 bits of named …\nC++ type: <code>hkHalf</code> (<code>hkInt16</code>), 16-bit float value\nDeserialize binary data from i16\nC++ type: <code>hkInt16</code> (<code>signed short</code>)\nDeserialize binary data from i32\nC++ type: <code>hkInt32</code> (<code>signed int</code>)\nDeserialize binary data from i64\nC++ type: <code>hkInt64</code> (<code>signed long long</code>)\nDeserialize binary data from i8\nC++ type: <code>hkInt8</code> (<code>signed char</code>)\nProvides a <code>Visitor</code> access to each entry of a map in the …\nC++ type: <code>hkMatrix3</code>\nC++ type: <code>hkMatrix4</code>\nOther types\nC++ type: <code>T*</code>\nC++ type: <code>hkQsTransform</code>\nC++ type: <code>hkQuaternion</code>\nSize to read to deserialize <code>enum</code> and <code>flags</code>. This is used …\nC++ type: <code>hkReal</code> (<code>float</code>)\nC++ type: <code>hkRotation</code>\nProvides a <code>Visitor</code> access to each element of a sequence in …\nNull-terminated string type.\nC++ type: <code>class</code> | <code>struct</code>\nC++ type: <code>hkTransform</code>\nDeserialize binary data from u16\nC++ type: <code>hkUint16</code> (<code>unsigned short</code>)\nDeserialize binary data from u32\nC++ type: <code>hkUint32</code> (<code>unsigned int</code>)\nDeserialize binary data from u64\nC++ type: <code>hkUint64</code> (<code>unsigned long long</code>)\nDeserialize binary data from u8\nC++ type: <code>hkUint8</code> (<code>unsigned char</code>)\nC++ type: <code>hkUlong</code> (<code>unsigned long</code>), defined to always be …\n<code>Unexpected</code> represents an unexpected invocation of any one …\nThe type produced by using this seed.\nThe value produced by this visitor.\nC++ type: <code>hkVariant</code> (void* and hkClass*) type\nThe <code>Visitor</code> that will be used to deserialize the content …\n<code>VariantAccess</code> is a visitor that is created by the …\nC++ type: <code>hkVector4</code>\nThis trait represents a visitor that walks through a …\nNo type information.\nGet current class index attribute(XML: e.g. <code>#0050</code>) for key …\nGet this class pointer name (e.g. <code>Pointer::new(1</code>)\nRaised when there is general error when deserializing a …\nDeserialize this value from the given Serde deserializer.\nEquivalent to the more common <code>Deserialize::deserialize</code> …\nDeserialize an <code>Array</code> value.\nDeserialize a <code>bool</code> value.\nDeserialize an <code>char</code> value.\nDeserialize class index.\nDeserialize a Class Index Array value.\nDeserialize an <code>CString</code> value.\nDeserialize an <code>enum</code> value.\nDeserialize an fixed array(e.g. <code>[bool; 3]</code>) value.\nDeserialize an <code>Flags</code> value.\nDeserialize an <code>Half</code>(<code>f16</code>) value.\nHint that the <code>Deserialize</code> type is expecting the …\nDeserialize an <code>i16</code> value.\nDeserialize an <code>i32</code> value.\nDeserialize an <code>i64</code> value.\nDeserialize an <code>i8</code> value.\nDeserialize map key.\nDeserialize an <code>Matrix3</code> value.\nDeserialize an <code>Matrix4</code> value.\nDeserialize an <code>Pointer</code> value.\nDeserialize an <code>QsTransform</code> value.\nDeserialize an <code>Quaternion</code> value.\nDeserialize an <code>f32</code> value.\nDeserialize an <code>Rotation</code> value.\nDeserialize an <code>StringPtr</code> value.\nDeserialize an <code>Struct</code> value.\nDeserialize an <code>Transform</code> value.\nDeserialize an <code>u16</code> value.\nDeserialize an <code>u32</code> value.\nDeserialize an <code>u64</code> value.\nDeserialize an <code>u8</code> value.\nDeserialize an <code>ULong</code>(pointer size(u32 or u64)) value.\nDeserialize an <code>Variant</code> value.\nDeserialize an <code>Vector4</code> value.\nDeserialize a <code>Void</code> value.\nRaised when a <code>Deserialize</code> struct type received more than …\nFormat a message stating what data this Visitor expects to …\nFormat an explanation of what data was being expected. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRaised when deserializing a sequence or map and the input …\nRaised when a <code>Deserialize</code> receives a type different from …\nRaised when a <code>Deserialize</code> receives a value of the right …\nRaised when a <code>Deserialize</code> struct type expected to receive …\nThis returns <code>Ok(Some(value))</code> for the next value in the …\nThis returns <code>Ok(Some(value))</code> for the next value in the …\nThis returns <code>Ok(Some(value))</code> for the next value in the …\nThis returns <code>Ok(Some(value))</code> for the next value in the …\nThis returns <code>Ok(Some((key, value)))</code> for the next …\nThis returns <code>Ok(Some((key, value)))</code> for the next …\nnext class name.\nThis returns <code>Ok(Some(key))</code> for the next key in the map, or …\nThis returns <code>Ok(Some(key))</code> for the next key in the map, or …\nThis returns <code>Ok(Some(value))</code> for the next value in the …\nThis returns <code>Ok(Some(value))</code> for the next value in the …\nThis returns <code>Ok(Some(value))</code> for the next value in the …\nThis returns <code>Ok(Some(value))</code> for the next value in the …\nThis returns <code>Ok(Some(value))</code> for the next value in the …\nThis returns <code>Ok(Some(value))</code> for the next value in the …\nThis returns a <code>Ok(value)</code> for the next value in the map.\nDeserialize class method\nThis returns a <code>Ok(value)</code> for the next value in the map.\ndeserialize class method.\nSkip reading the current position of binary data by pad …\nDeserialize C++ inherited parent fields(for bytes method)\nDeserialize C++ inherited parent fields(for bytes method)\nReturns the number of elements remaining in the sequence, …\nReturns the number of entries remaining in the map, if …\nThis returns a <code>Ok(())</code> for the skip value in the map.\n<code>Deserialize</code> implementations should typically use …\nCalled when deserializing a variant with no values.\nRaised when a <code>Deserialize</code> struct type received a field …\nRaised when a <code>Deserialize</code> enum type received a variant …\n<code>variant</code> is called to identify which variant to deserialize.\n<code>variant</code> is called to identify which variant to deserialize.\nThe input contains an Array.\nThe input contains a boolean.\nThe input contains char.\nThe input contains a havok class.\nThe input contains a CString.\nThe input contains an enum.\nThe input contains flags.\nThe input contains a f16.\nThe input contains a i16.\nThe input contains a i32.\nThe input contains a i64.\nThe input contains a i8.\nThe input contains a <code>MapAccess</code> key.\nThe input contains a Matrix3.\nThe input contains a Matrix4.\nThe input contains a Pointer.\nThe input contains a QsTransform.\nThe input contains a Quaternion.\nThe input contains a f32.\nThe input contains a Rotation.\nThe input contains a StringPtr.\nThe input contains a key-value map.(serde: <code>visit_map</code>)\nThe input contains a key-value map.(serde: <code>visit_map</code>)\nThe input contains a Transform.\nThe input contains a u16.\nThe input contains a u32.\nThe input contains a u64.\nThe input contains a u8.\nThe input contains a u64.\nThe input contains a Variant.\nThe input contains a Vector4.\nThe input contains a void.\nTrait used by <code>Serialize</code> implementations to generically …\nThe error type when some error occurs during serialization.\nMust match the <code>Error</code> type of our <code>Serializer</code>.\nMust match the <code>Error</code> type of our <code>Serializer</code>.\nMust match the <code>Error</code> type of our <code>Serializer</code>.\nNo size calculation is required for NonPtr. This is an …\nThe output type produced by this <code>Serializer</code> during …\nMust match the <code>Ok</code> type of our <code>Serializer</code>.\nMust match the <code>Ok</code> type of our <code>Serializer</code>.\nMust match the <code>Ok</code> type of our <code>Serializer</code>.\nA <strong>data structure</strong> that can be serialized into any data …\nReturned from <code>Serializer::serialize_enum_flags</code>.\nType returned from <code>serialize_enum_flags</code> for serializing the\nReturned from <code>Serializer::serialize_array</code>.\nType returned from <code>serialize_seq</code> for serializing the …\nReturned from <code>Serializer::serialize_struct</code>.\nA <strong>data format</strong> that can serialize any data structure …\nptr size\nC++ Class size\nUsed for writing binary data in Array. (To write after the …\nUsed when a <code>Serialize</code> implementation encounters any error …\nFinish serializing a sequence.\nFinish serializing a struct.\nFinish serializing flags.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nProcessing for padding to serialize binary data\nSerialize this value into the given Serde serializer.\nSerialize an <code>Array</code> value.\nSerialize a struct field for array.\nSerialize all bits of a flag.(Only used by binary …\nSerialize a <code>bool</code> value.\nSerialize an <code>char</code> value.\nSerialize a Havok Class sequence element.(e.g. …\nSerialize an <code>CString</code> value.\nSerialize a cstring sequence element.\nSerialization process when the flag is 0bits.(Only used by …\nSerialize an <code>enum</code> or <code>Flags</code> value.\nSerialize a struct field.\nSerialize a enum or bit field.(Only used by XML …\nSerialize a struct field for fixed array.\nSerialize an <code>Half</code>(<code>f16</code>) value.\nSerialize an <code>i16</code> value.\nSerialize an <code>i32</code> value.\nSerialize an <code>u64</code> value.\nSerialize an <code>i8</code> value.\nSerialize a math sequence element.(e.g. <code>Matrix3</code>)\nSerialize an <code>Matrix3</code> value.\nSerialize an <code>Matrix4</code> value.\nSerialize an <code>Pointer</code> value.\nSerialize a primitive sequence element. (e.g. <code>char</code>, <code>bool</code> <code>u8</code>…\nSerialize an <code>QsTransform</code> value.\nSerialize an <code>Quaternion</code> value.\nSerialize an <code>f32</code> value.\nSerialize an <code>Rotation</code> value.\nSerialize an <code>StringPtr</code> value.\nSerialize a stringptr sequence element.\nSerialize an <code>Struct</code> value.\nSerialize an <code>Transform</code> value.\nSerialize an <code>u16</code> value.\nSerialize an <code>u32</code> value.\nSerialize an <code>i64</code> value.\nSerialize an <code>u8</code> value.\nSerialize an <code>ULong</code>(pointer size(u32 or u64)) value.\nSerialize an <code>Variant</code> value.\nSerialize an <code>Vector4</code> value.\nSerialize a <code>Void</code> value.\nProcess for fields with <code>SERIALIZE_IGNORED</code> flag.\nProcess for fields with <code>SERIALIZE_IGNORED</code> flag.\nProcess for fields with <code>SERIALIZE_IGNORED</code> flag.\nx86 class size\nx86_64 class size")