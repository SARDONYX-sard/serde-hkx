(function() {
    var type_impls = Object.fromEntries([["jwalk",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-WalkDirGeneric%3CC%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/jwalk/lib.rs.html#387-500\">Source</a><a href=\"#impl-IntoIterator-for-WalkDirGeneric%3CC%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;C: <a class=\"trait\" href=\"jwalk/trait.ClientState.html\" title=\"trait jwalk::ClientState\">ClientState</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"struct\" href=\"jwalk/struct.WalkDirGeneric.html\" title=\"struct jwalk::WalkDirGeneric\">WalkDirGeneric</a>&lt;C&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/jwalk/lib.rs.html#388\">Source</a><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"jwalk/struct.DirEntry.html\" title=\"struct jwalk::DirEntry\">DirEntry</a>&lt;C&gt;, <a class=\"struct\" href=\"jwalk/struct.Error.html\" title=\"struct jwalk::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/jwalk/lib.rs.html#389\">Source</a><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"jwalk/struct.DirEntryIter.html\" title=\"struct jwalk::DirEntryIter\">DirEntryIter</a>&lt;C&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/jwalk/lib.rs.html#391-499\">Source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"jwalk/struct.DirEntryIter.html\" title=\"struct jwalk::DirEntryIter\">DirEntryIter</a>&lt;C&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"DirEntryIter&lt;C&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Creates an iterator from a value. <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details>","IntoIterator","jwalk::WalkDir"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WalkDirGeneric%3CC%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/jwalk/lib.rs.html#212-354\">Source</a><a href=\"#impl-WalkDirGeneric%3CC%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;C: <a class=\"trait\" href=\"jwalk/trait.ClientState.html\" title=\"trait jwalk::ClientState\">ClientState</a>&gt; <a class=\"struct\" href=\"jwalk/struct.WalkDirGeneric.html\" title=\"struct jwalk::WalkDirGeneric\">WalkDirGeneric</a>&lt;C&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/jwalk/lib.rs.html#221-237\">Source</a><h4 class=\"code-header\">pub fn <a href=\"jwalk/struct.WalkDirGeneric.html#tymethod.new\" class=\"fn\">new</a>&lt;P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt;(root: P) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create a builder for a recursive directory iterator starting at the file\npath root. If root is a directory, then it is the first item yielded by\nthe iterator. If root is a file, then it is the first and only item\nyielded by the iterator.</p>\n<p>Note that his iterator can fail on the first element if <code>into_iter()</code> is used as it\nhas to be infallible. Use <a href=\"jwalk/struct.WalkDirGeneric.html#method.try_into_iter\" title=\"method jwalk::WalkDirGeneric::try_into_iter\"><code>try_into_iter()</code></a>\ninstead for error handling.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_into_iter\" class=\"method\"><a class=\"src rightside\" href=\"src/jwalk/lib.rs.html#240-247\">Source</a><h4 class=\"code-header\">pub fn <a href=\"jwalk/struct.WalkDirGeneric.html#tymethod.try_into_iter\" class=\"fn\">try_into_iter</a>(self) -&gt; <a class=\"type\" href=\"jwalk/type.Result.html\" title=\"type jwalk::Result\">Result</a>&lt;<a class=\"struct\" href=\"jwalk/struct.DirEntryIter.html\" title=\"struct jwalk::DirEntryIter\">DirEntryIter</a>&lt;C&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create an iterator or fail if the rayon threadpool (in any configuration) is busy.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.root\" class=\"method\"><a class=\"src rightside\" href=\"src/jwalk/lib.rs.html#250-252\">Source</a><h4 class=\"code-header\">pub fn <a href=\"jwalk/struct.WalkDirGeneric.html#tymethod.root\" class=\"fn\">root</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a></h4></section></summary><div class=\"docblock\"><p>Root path of the walk.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sort\" class=\"method\"><a class=\"src rightside\" href=\"src/jwalk/lib.rs.html#257-260\">Source</a><h4 class=\"code-header\">pub fn <a href=\"jwalk/struct.WalkDirGeneric.html#tymethod.sort\" class=\"fn\">sort</a>(self, sort: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Sort entries by <code>file_name</code> per directory. Defaults to <code>false</code>. Use\n<a href=\"struct.WalkDirGeneric.html#method.process_read_dir\"><code>process_read_dir</code></a> for custom\nsorting or filtering.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.skip_hidden\" class=\"method\"><a class=\"src rightside\" href=\"src/jwalk/lib.rs.html#263-266\">Source</a><h4 class=\"code-header\">pub fn <a href=\"jwalk/struct.WalkDirGeneric.html#tymethod.skip_hidden\" class=\"fn\">skip_hidden</a>(self, skip_hidden: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Skip hidden entries. Enabled by default.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.follow_links\" class=\"method\"><a class=\"src rightside\" href=\"src/jwalk/lib.rs.html#279-282\">Source</a><h4 class=\"code-header\">pub fn <a href=\"jwalk/struct.WalkDirGeneric.html#tymethod.follow_links\" class=\"fn\">follow_links</a>(self, follow_links: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Follow symbolic links. By default, this is disabled.</p>\n<p>When <code>yes</code> is <code>true</code>, symbolic links are followed as if they were normal\ndirectories and files. If a symbolic link is broken or is involved in a\nloop, an error is yielded.</p>\n<p>When enabled, the yielded <a href=\"struct.DirEntry.html\"><code>DirEntry</code></a> values represent the target of\nthe link while the path corresponds to the link. See the <a href=\"struct.DirEntry.html\"><code>DirEntry</code></a>\ntype for more details.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min_depth\" class=\"method\"><a class=\"src rightside\" href=\"src/jwalk/lib.rs.html#289-295\">Source</a><h4 class=\"code-header\">pub fn <a href=\"jwalk/struct.WalkDirGeneric.html#tymethod.min_depth\" class=\"fn\">min_depth</a>(self, depth: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Set the minimum depth of entries yielded by the iterator.</p>\n<p>The smallest depth is <code>0</code> and always corresponds to the path given\nto the <code>new</code> function on this type. Its direct descendents have depth\n<code>1</code>, and their descendents have depth <code>2</code>, and so on.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_depth\" class=\"method\"><a class=\"src rightside\" href=\"src/jwalk/lib.rs.html#311-320\">Source</a><h4 class=\"code-header\">pub fn <a href=\"jwalk/struct.WalkDirGeneric.html#tymethod.max_depth\" class=\"fn\">max_depth</a>(self, depth: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Set the maximum depth of entries yield by the iterator.</p>\n<p>The smallest depth is <code>0</code> and always corresponds to the path given\nto the <code>new</code> function on this type. Its direct descendents have depth\n<code>1</code>, and their descendents have depth <code>2</code>, and so on.</p>\n<p>A depth &lt; 2 will automatically change <code>parallelism</code> to\n<code>Parallelism::Serial</code>. Parrallelism happens at the <code>fs::read_dir</code> level.\nIt only makes sense to use multiple threads when reading more then one\ndirectory.</p>\n<p>Note that this will not simply filter the entries of the iterator, but\nit will actually avoid descending into directories when the depth is\nexceeded.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.parallelism\" class=\"method\"><a class=\"src rightside\" href=\"src/jwalk/lib.rs.html#324-327\">Source</a><h4 class=\"code-header\">pub fn <a href=\"jwalk/struct.WalkDirGeneric.html#tymethod.parallelism\" class=\"fn\">parallelism</a>(self, parallelism: <a class=\"enum\" href=\"jwalk/enum.Parallelism.html\" title=\"enum jwalk::Parallelism\">Parallelism</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Degree of parallelism to use when performing walk. Defaults to\n<a href=\"enum.Parallelism.html#variant.RayonDefaultPool\"><code>Parallelism::RayonDefaultPool</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.root_read_dir_state\" class=\"method\"><a class=\"src rightside\" href=\"src/jwalk/lib.rs.html#332-335\">Source</a><h4 class=\"code-header\">pub fn <a href=\"jwalk/struct.WalkDirGeneric.html#tymethod.root_read_dir_state\" class=\"fn\">root_read_dir_state</a>(self, read_dir_state: C::<a class=\"associatedtype\" href=\"jwalk/trait.ClientState.html#associatedtype.ReadDirState\" title=\"type jwalk::ClientState::ReadDirState\">ReadDirState</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Initial ClientState::ReadDirState that is passed to\n<a href=\"struct.WalkDirGeneric.html#method.process_read_dir\"><code>process_read_dir</code></a>\nwhen processing root. Defaults to ClientState::ReadDirState::default().</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.process_read_dir\" class=\"method\"><a class=\"src rightside\" href=\"src/jwalk/lib.rs.html#344-353\">Source</a><h4 class=\"code-header\">pub fn <a href=\"jwalk/struct.WalkDirGeneric.html#tymethod.process_read_dir\" class=\"fn\">process_read_dir</a>&lt;F&gt;(self, process_by: F) -&gt; Self<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt;, &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>, &amp;mut C::<a class=\"associatedtype\" href=\"jwalk/trait.ClientState.html#associatedtype.ReadDirState\" title=\"type jwalk::ClientState::ReadDirState\">ReadDirState</a>, &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"type\" href=\"jwalk/type.Result.html\" title=\"type jwalk::Result\">Result</a>&lt;<a class=\"struct\" href=\"jwalk/struct.DirEntry.html\" title=\"struct jwalk::DirEntry\">DirEntry</a>&lt;C&gt;&gt;&gt;) + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,</div></h4></section></summary><div class=\"docblock\"><p>A callback function to process (sort/filter/skip/state) each directory\nof entries before they are yielded. Modify the given array to\nsort/filter entries. Use <a href=\"struct.DirEntry.html#field.read_children_path\"><code>entry.read_children_path = None</code></a> to yield a\ndirectory entry but skip reading its contents. Use\n<a href=\"struct.DirEntry.html#field.client_state\"><code>entry.client_state</code></a>\nto store custom state with an entry.</p>\n</div></details></div></details>",0,"jwalk::WalkDir"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[14450]}