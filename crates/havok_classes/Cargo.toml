[package]
name = "havok_classes"
edition = "2021"
authors.workspace = true
version.workspace = true
license.workspace = true
description.workspace = true
repository.workspace = true
rust-version.workspace = true

[dependencies]
bitflags = { workspace = true } # To generate flags type
educe = { workspace = true, features = [
  "full",
] } # To support the `Default` trait implementation for huge fixed-size arrays.
num-derive = { workspace = true } # To serialize Enum & Flags
num-traits = { workspace = true } # To serialize Enum & Flags
serde = { workspace = true, features = [
  "derive",
], optional = true } # Implement (De)Serializer

# workspace members
serde_with = { workspace = true, optional = true } # Serde utility
havok_serde = { workspace = true }
havok_types = { workspace = true }
havok_types_derive = { workspace = true }


[features]
# Derive `serde`
serde = ["dep:serde", "dep:serde_with"]

# Strictly check for the presence of values.
# For example, forbitten missing fields, duplicate fields, an error is made. (but not the original behavior).
strict = []

# When reading partial XML in Nemesis, you may want to ignore duplicates because the original comes a second time. This is used in that case.
ignore_duplicates = []
