[package]
name = "havok_classes"
edition = "2021"
authors.workspace = true
version.workspace = true
license.workspace = true
description.workspace = true
repository.workspace = true
rust-version.workspace = true

[dependencies]
bitflags = "2.4" # To generate flags type
educe = { version = "0.6.0", features = [
  "full",
] } # To support the `Default` trait implementation for huge fixed-size arrays.
havok_serde = { path = "../havok_serde" }
havok_types = { path = "../havok_types" }
havok_types_derive = { path = "../havok_types_derive" }
num-derive = "0.4" # To serialize Enum & Flags
num-traits = "0.2" # To serialize Enum & Flags
serde = { version = "1.0", features = [
  "derive",
], optional = true } # Implement (De)Serializer
serde_with = { version = "3.8.1", optional = true } # Serde utility

[features]
# Derive `serde`
serde = ["dep:serde", "dep:serde_with"]

# Strictly check for the presence of values.
# For example, forbitten missing fields, duplicate fields, an error is made. (but not the original behavior).
strict = []

# When reading partial XML in Nemesis, you may want to ignore duplicates because the original comes a second time. This is used in that case.
ignore_duplicates = []
