[workspace.package]
authors = ["SARDONYX"]
categories = ["encoding"]
description = "Havok Behavior (De)Serialization Library(ver. hk_2010.2.0-r1) + Nemesis ID"
edition = "2024"
keywords = ["serde", "havok"]
license = "MIT OR Apache-2.0"
readme = "README.md"
repository = "https://github.com/SARDONYX-sard/serde-hkx"                     # NOTE: Without it, CLI & CI build will error.
rust-version = "1.85"
version = "0.7.2"

[workspace]
members = [
  "crates/class_generator",
  "crates/cli",
  "crates/serde_hkx_features",
  "crates/havok_classes",
  "crates/havok_serde",
  "crates/havok_types",
  "crates/havok_types_derive",
  "crates/havok_types_derive/src/proc_macros",
  "crates/inheritance_tree_gen",
  "serde_hkx",
]
default-members = ["crates/cli"]
resolver = "2"

[workspace.dependencies]
bitflags = "2.9.0"                                             # To generate flags type
clap = { version = "4.5.23", features = ["derive"] }           # For CLI
color-print = "0.3.7"                                          # To color example help
educe = "0.6.0"                                                # Custom derive by derive
indexmap = "2.8.0"                                             # Ordering HashMap
jwalk = { version = "0.8.1" }                                  # To enumerate json class files
num-derive = "0.4"                                             # To serialize Enum & Flags
num-traits = "0.2.19"                                          # To serialize Enum & Flags
parse-display = "0.10.0"                                       # Display derive
lexical = { version = "7.0.4", features = ["radix", "format", "power-of-two"] }
proc-macro2 = { version = "1.0.94", default-features = false } # Rust token
quote = { version = "1.0.40", default-features = false }       # Rust token gen to more convenience
rayon = { version = "1.10.0" }                                 # Parallel
schemars = { version = "1.0.0-alpha.17" }
serde = { version = "1.0.219", features = ["derive"] }         # (De)Serializer
serde_json = { version = "1.0.140" }                           # To read and write Json files
serde_with = "3.12.0"                                          # Serde utility
similar = "2.7.0"                                              # Create diff
snafu = "0.8.5"                                                # Define all error patterns(with backtrace)
static_assertions = "1.1.0"                                    # Compile tim assertions
syn = { version = "2.0.100", default-features = false }         # Rust parser
tokio = { version = "1.44.2" }                                 # Async runtime
tracing = { version = "0.1.41" }                               # logger

# workspace members
havok_classes = { path = "./crates/havok_classes" }
havok_serde = { path = "./crates/havok_serde" }
havok_types = { path = "./crates/havok_types" }
havok_types_derive = { path = "./crates/havok_types_derive" }
serde_hkx = { path = "./serde_hkx", default-features = false }
serde_hkx_features = { path = "./crates/serde_hkx_features" }

# dev-dependencies
pretty_assertions = "1.4.1"                                  # Color diff assertion
quick_tracing = { version = "0.1.5", features = ["derive"] } # Easy logging

# Use release mode during development to prevent `serde-hkx` stack overflow
# - ref: https://doc.rust-lang.org/cargo/reference/profiles.html#release
[profile.release-lto]
codegen-units = 1
inherits = "release"
lto = true
panic = "abort"
strip = true

[workspace.lints.clippy]
all = { level = "warn", priority = -1 }
cargo = { level = "warn", priority = -1 }
nursery = { level = "warn", priority = -1 }

# allow list
allow_attributes_without_reason = "allow"
cargo_common_metadata = "allow"
derive_partial_eq_without_eq = "allow"
future_not_send = "allow"
multiple_crate_versions = "allow"
pub_with_shorthand = "allow"
redundant_pub_crate = "allow"
result_large_err = "allow"

# custom deny list
char_lit_as_u8 = "deny"
checked_conversions = "deny"
clone_on_ref_ptr = "deny"
cognitive_complexity = "deny"
debug_assert_with_mut_call = "deny"
disallowed_script_idents = "deny"
doc_link_with_quotes = "deny"
empty_enum = "deny"
empty_line_after_outer_attr = "deny"
empty_structs_with_brackets = "deny"
expect_used = "deny"
expl_impl_clone_on_copy = "deny"
explicit_deref_methods = "deny"
explicit_into_iter_loop = "deny"
fallible_impl_from = "deny"
filetype_is_file = "deny"
filter_map_next = "deny"
flat_map_option = "deny"
float_cmp = "deny"
float_cmp_const = "deny"
float_equality_without_abs = "deny"
fn_params_excessive_bools = "deny"
fn_to_numeric_cast_any = "deny"
from_iter_instead_of_collect = "deny"
if_let_mutex = "deny"
implicit_clone = "deny"
imprecise_flops = "deny"
inefficient_to_string = "deny"
invalid_upcast_comparisons = "deny"
items_after_test_module = "deny"
large_digit_groups = "deny"
large_stack_arrays = "deny"
large_types_passed_by_value = "deny"
let_unit_value = "deny"
linkedlist = "deny"
lossy_float_literal = "deny"
macro_use_imports = "deny"
manual_ok_or = "deny"
map_flatten = "deny"
map_unwrap_or = "deny"
match_on_vec_items = "deny"
match_same_arms = "deny"
match_wild_err_arm = "deny"
match_wildcard_for_single_variants = "deny"
mem_forget = "deny"
missing_const_for_fn = "deny"
missing_enforced_import_renames = "deny"
missing_errors_doc = "deny"
missing_panics_doc = "deny"
mut_mut = "deny"
mutex_integer = "deny"
needless_borrow = "deny"
needless_continue = "deny"
needless_for_each = "deny"
option_if_let_else = "deny"
option_option = "deny"
panic = "deny"                              # Use with test and code_gen
path_buf_push_overwrite = "deny"
ptr_as_ptr = "deny"
rc_mutex = "deny"
ref_option_ref = "deny"
rest_pat_in_fully_bound_structs = "deny"
same_functions_in_if_condition = "deny"
semicolon_if_nothing_returned = "deny"
single_match_else = "deny"
string_add = "deny"
string_add_assign = "deny"
string_lit_as_bytes = "deny"
string_to_string = "deny"
suspicious_operation_groupings = "deny"
trait_duplication_in_bounds = "deny"
unnested_or_patterns = "deny"
unseparated_literal_suffix = "deny"
unused_self = "deny"
unwrap_used = "deny"
unwrap_in_result = "deny"
useless_let_if_seq = "deny"
useless_transmute = "deny"
verbose_file_reads = "deny"
wildcard_dependencies = "deny"
zero_sized_map_values = "deny"
